// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/organizer/pb/organizer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizerService_CreateOrganizer_FullMethodName = "/organizer.OrganizerService/CreateOrganizer"
	OrganizerService_UpdateOrganizer_FullMethodName = "/organizer.OrganizerService/UpdateOrganizer"
	OrganizerService_DeleteOrganizer_FullMethodName = "/organizer.OrganizerService/DeleteOrganizer"
)

// OrganizerServiceClient is the client API for OrganizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizerServiceClient interface {
	CreateOrganizer(ctx context.Context, in *CreateOrganizerRequest, opts ...grpc.CallOption) (*CreateOrganizerResponse, error)
	UpdateOrganizer(ctx context.Context, in *UpdateOrganizerRequest, opts ...grpc.CallOption) (*UpdateOrganizerResponse, error)
	DeleteOrganizer(ctx context.Context, in *DeleteOrganizerRequest, opts ...grpc.CallOption) (*DeleteOrganizerResponse, error)
}

type organizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizerServiceClient(cc grpc.ClientConnInterface) OrganizerServiceClient {
	return &organizerServiceClient{cc}
}

func (c *organizerServiceClient) CreateOrganizer(ctx context.Context, in *CreateOrganizerRequest, opts ...grpc.CallOption) (*CreateOrganizerResponse, error) {
	out := new(CreateOrganizerResponse)
	err := c.cc.Invoke(ctx, OrganizerService_CreateOrganizer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) UpdateOrganizer(ctx context.Context, in *UpdateOrganizerRequest, opts ...grpc.CallOption) (*UpdateOrganizerResponse, error) {
	out := new(UpdateOrganizerResponse)
	err := c.cc.Invoke(ctx, OrganizerService_UpdateOrganizer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) DeleteOrganizer(ctx context.Context, in *DeleteOrganizerRequest, opts ...grpc.CallOption) (*DeleteOrganizerResponse, error) {
	out := new(DeleteOrganizerResponse)
	err := c.cc.Invoke(ctx, OrganizerService_DeleteOrganizer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizerServiceServer is the server API for OrganizerService service.
// All implementations must embed UnimplementedOrganizerServiceServer
// for forward compatibility
type OrganizerServiceServer interface {
	CreateOrganizer(context.Context, *CreateOrganizerRequest) (*CreateOrganizerResponse, error)
	UpdateOrganizer(context.Context, *UpdateOrganizerRequest) (*UpdateOrganizerResponse, error)
	DeleteOrganizer(context.Context, *DeleteOrganizerRequest) (*DeleteOrganizerResponse, error)
	mustEmbedUnimplementedOrganizerServiceServer()
}

// UnimplementedOrganizerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizerServiceServer struct {
}

func (UnimplementedOrganizerServiceServer) CreateOrganizer(context.Context, *CreateOrganizerRequest) (*CreateOrganizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizer not implemented")
}
func (UnimplementedOrganizerServiceServer) UpdateOrganizer(context.Context, *UpdateOrganizerRequest) (*UpdateOrganizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizer not implemented")
}
func (UnimplementedOrganizerServiceServer) DeleteOrganizer(context.Context, *DeleteOrganizerRequest) (*DeleteOrganizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizer not implemented")
}
func (UnimplementedOrganizerServiceServer) mustEmbedUnimplementedOrganizerServiceServer() {}

// UnsafeOrganizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizerServiceServer will
// result in compilation errors.
type UnsafeOrganizerServiceServer interface {
	mustEmbedUnimplementedOrganizerServiceServer()
}

func RegisterOrganizerServiceServer(s grpc.ServiceRegistrar, srv OrganizerServiceServer) {
	s.RegisterService(&OrganizerService_ServiceDesc, srv)
}

func _OrganizerService_CreateOrganizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).CreateOrganizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizerService_CreateOrganizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).CreateOrganizer(ctx, req.(*CreateOrganizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_UpdateOrganizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).UpdateOrganizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizerService_UpdateOrganizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).UpdateOrganizer(ctx, req.(*UpdateOrganizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_DeleteOrganizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).DeleteOrganizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizerService_DeleteOrganizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).DeleteOrganizer(ctx, req.(*DeleteOrganizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizerService_ServiceDesc is the grpc.ServiceDesc for OrganizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organizer.OrganizerService",
	HandlerType: (*OrganizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizer",
			Handler:    _OrganizerService_CreateOrganizer_Handler,
		},
		{
			MethodName: "UpdateOrganizer",
			Handler:    _OrganizerService_UpdateOrganizer_Handler,
		},
		{
			MethodName: "DeleteOrganizer",
			Handler:    _OrganizerService_DeleteOrganizer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/organizer/pb/organizer.proto",
}
